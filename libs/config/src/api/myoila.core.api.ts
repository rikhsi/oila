//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IProfileApiService {
    getUserProfile(): Observable<ResponseDataOfUserResponseModel>;
    uploadPhotoProfile(file?: FileParameter | undefined): Observable<ResponseDataOfString>;
    userIsNotRegistered(email?: string | undefined): Observable<boolean>;
}

@Injectable({
    providedIn: 'root'
})
export class ProfileApiService implements IProfileApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getUserProfile(): Observable<ResponseDataOfUserResponseModel> {
        let url_ = this.baseUrl + "/api/core/Profile/Profile/GetUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfUserResponseModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfUserResponseModel>;
        }));
    }

    protected processGetUserProfile(response: HttpResponseBase): Observable<ResponseDataOfUserResponseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfUserResponseModel;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    uploadPhotoProfile(file?: FileParameter | undefined): Observable<ResponseDataOfString> {
        let url_ = this.baseUrl + "/api/core/Profile/Profile/UploadPhotoProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadPhotoProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadPhotoProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfString>;
        }));
    }

    protected processUploadPhotoProfile(response: HttpResponseBase): Observable<ResponseDataOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfString;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    userIsNotRegistered(email?: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/core/Profile/Profile/UserIsNotRegistered?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserIsNotRegistered(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserIsNotRegistered(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUserIsNotRegistered(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISpInterfaceTranslationApiService {
    create(model: SpInterfaceTranslationModel): Observable<ResponseDataOfSpInterfaceTranslationModel>;
    update(model: SpInterfaceTranslationModel): Observable<ResponseDataOfResponseSuccess>;
    delete(id?: number | undefined): Observable<ResponseDataOfResponseSuccess>;
    getAll(zorroFilterRequest: ZorroFilterRequest): Observable<ResponseDataOfPageListOfSpInterfaceTranslationModel>;
    getAllDictionary(project: EnumProject, language: EnumLanguage): Observable<{ [key: string]: string; }>;
}

@Injectable({
    providedIn: 'root'
})
export class SpInterfaceTranslationApiService implements ISpInterfaceTranslationApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    create(model: SpInterfaceTranslationModel): Observable<ResponseDataOfSpInterfaceTranslationModel> {
        let url_ = this.baseUrl + "/api/core/sp/SpInterfaceTranslation/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfSpInterfaceTranslationModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfSpInterfaceTranslationModel>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ResponseDataOfSpInterfaceTranslationModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfSpInterfaceTranslationModel;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(model: SpInterfaceTranslationModel): Observable<ResponseDataOfResponseSuccess> {
        let url_ = this.baseUrl + "/api/core/sp/SpInterfaceTranslation/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfResponseSuccess>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfResponseSuccess>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDataOfResponseSuccess> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfResponseSuccess;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id?: number | undefined): Observable<ResponseDataOfResponseSuccess> {
        let url_ = this.baseUrl + "/api/core/sp/SpInterfaceTranslation/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfResponseSuccess>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfResponseSuccess>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDataOfResponseSuccess> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfResponseSuccess;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAll(zorroFilterRequest: ZorroFilterRequest): Observable<ResponseDataOfPageListOfSpInterfaceTranslationModel> {
        let url_ = this.baseUrl + "/api/core/sp/SpInterfaceTranslation/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(zorroFilterRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfPageListOfSpInterfaceTranslationModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfPageListOfSpInterfaceTranslationModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ResponseDataOfPageListOfSpInterfaceTranslationModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfPageListOfSpInterfaceTranslationModel;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllDictionary(project: EnumProject, language: EnumLanguage): Observable<{ [key: string]: string; }> {
        let url_ = this.baseUrl + "/api/core/sp/SpInterfaceTranslation/GetAllDictionary/project/{project}/language/{language}";
        if (project === undefined || project === null)
            throw new Error("The parameter 'project' must be defined.");
        url_ = url_.replace("{project}", encodeURIComponent("" + project));
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDictionary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDictionary(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: string; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: string; }>;
        }));
    }

    protected processGetAllDictionary(response: HttpResponseBase): Observable<{ [key: string]: string; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as { [key: string]: string; };
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISpProductColorApiService {
    create(model: SpProductColorModel): Observable<ResponseDataOfSpProductColorModel>;
    update(model: SpProductColorModel): Observable<ResponseDataOfResponseSuccess>;
    delete(id?: number | undefined): Observable<ResponseDataOfResponseSuccess>;
    getAll(zorroFilterRequest: ZorroFilterRequest): Observable<ResponseDataOfPageListOfSpProductColorModel>;
}

@Injectable({
    providedIn: 'root'
})
export class SpProductColorApiService implements ISpProductColorApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    create(model: SpProductColorModel): Observable<ResponseDataOfSpProductColorModel> {
        let url_ = this.baseUrl + "/api/core/sp/SpProductColor/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfSpProductColorModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfSpProductColorModel>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ResponseDataOfSpProductColorModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfSpProductColorModel;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(model: SpProductColorModel): Observable<ResponseDataOfResponseSuccess> {
        let url_ = this.baseUrl + "/api/core/sp/SpProductColor/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfResponseSuccess>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfResponseSuccess>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDataOfResponseSuccess> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfResponseSuccess;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id?: number | undefined): Observable<ResponseDataOfResponseSuccess> {
        let url_ = this.baseUrl + "/api/core/sp/SpProductColor/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfResponseSuccess>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfResponseSuccess>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDataOfResponseSuccess> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfResponseSuccess;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAll(zorroFilterRequest: ZorroFilterRequest): Observable<ResponseDataOfPageListOfSpProductColorModel> {
        let url_ = this.baseUrl + "/api/core/sp/SpProductColor/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(zorroFilterRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ResponseDataOfPageListOfSpProductColorModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ResponseDataOfPageListOfSpProductColorModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ResponseDataOfPageListOfSpProductColorModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResponseDataOfPageListOfSpProductColorModel;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ResponseDataOfUserResponseModel {
    result?: UserResponseModel | undefined;
    error?: ResponseError | undefined;
}

export interface UserResponseModel {
    id?: number | undefined;
    userName: string;
    lastName: string;
    firstName: string;
    middleName?: string | undefined;
    birthDay?: Date | undefined;
    pinfl?: string | undefined;
    email: string;
    gender: EnumGender;
    passportSerial?: string | undefined;
    passportNumber?: string | undefined;
    phone?: string | undefined;
    profilePhoto?: string | undefined;
    status: EnumUserStatus;
    roleId: number;
    createdBy?: number | undefined;
    postalCode?: string | undefined;
    addressLine?: string | undefined;
}

export enum EnumGender {
    Male = 1,
    Female = 2,
}

export enum EnumUserStatus {
    SmsSent = 1,
    NotVerified = 2,
    Active = 3,
    Blocked = 4,
}

export interface ResponseError {
    code: number;
    message?: string | undefined;
}

export interface ResponseDataOfString {
    result?: string | undefined;
    error?: ResponseError | undefined;
}

export interface ResponseDataOfSpInterfaceTranslationModel {
    result?: SpInterfaceTranslationModel | undefined;
    error?: ResponseError | undefined;
}

export interface SpBaseModel {
    id?: number | undefined;
    name: MultiLanguageField;
    createdDate?: Date | undefined;
}

export interface SpInterfaceTranslationModel extends SpBaseModel {
    key: string;
    project: EnumProject;
}

export enum EnumProject {
    Admin = 1,
    Client = 2,
    All = 3,
}

export interface MultiLanguageField {
    uz?: string | undefined;
    ru?: string | undefined;
}

export interface ResponseDataOfResponseSuccess {
    result?: ResponseSuccess | undefined;
    error?: ResponseError | undefined;
}

export interface ResponseSuccess {
    success: boolean;
}

export interface ResponseDataOfPageListOfSpInterfaceTranslationModel {
    result?: PageListOfSpInterfaceTranslationModel | undefined;
    error?: ResponseError | undefined;
}

export interface PageListOfSpInterfaceTranslationModel {
    pageIndex: number;
    pageSize: number;
    total: number;
    pageTotal: number;
    filteredTotal: number;
    items?: SpInterfaceTranslationModel[] | undefined;
}

export interface ZorroFilterRequest {
    pageIndex: number;
    pageSize: number;
    sort?: ZorroSort[] | undefined;
    filter?: ZorroFilter[] | undefined;
}

export interface ZorroSort {
    key?: string | undefined;
    value: ZorroSortEnum;
}

export enum ZorroSortEnum {
    Asc = 0,
    Desc = 1,
}

export interface ZorroFilter {
    key?: string | undefined;
    value?: any | undefined;
}

export enum EnumLanguage {
    Uz = 1,
    Ru = 2,
}

export interface ResponseDataOfSpProductColorModel {
    result?: SpProductColorModel | undefined;
    error?: ResponseError | undefined;
}

export interface SpProductColorModel {
    id: number;
    code: string;
    name: MultiLanguageField;
}

export interface ResponseDataOfPageListOfSpProductColorModel {
    result?: PageListOfSpProductColorModel | undefined;
    error?: ResponseError | undefined;
}

export interface PageListOfSpProductColorModel {
    pageIndex: number;
    pageSize: number;
    total: number;
    pageTotal: number;
    filteredTotal: number;
    items?: SpProductColorModel[] | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}